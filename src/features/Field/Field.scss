@use "sass:string";

@use '../../utils/variables';

$cells: (
  2: #eee4da,
  4: #eee1c9,
  8: #f3b27a,
  16: #f69664,
  32: #f77c5f,
  64: #f75f3b,
  128: #edd073,
  256: #edcc62,
  512: #edc950,
  1024: #edc53f,
  2048: #edc22e,
  "super": #3c3a33,
);

.Field {
  display: flex;
  gap: 15px;

  &-Container {
    position: relative;

    background: #bbada0;
    border-spacing: 10px;
    border-radius: variables.$field-border-radius;
    padding: 15px;
  }
}

.FieldColumn {
  display: flex;
  flex-direction: column;
  gap: variables.$gap;

  &:last-child {
    margin-bottom: 0;
  }
}

.Cells {
  position: absolute;
  top: variables.$gap;
  bottom: variables.$gap;
  left: variables.$gap;
  right: variables.$gap;
}

.FieldCell {
  display: flex;
  justify-content: center;
  align-items: center;
  width: variables.$cell-size;
  height: variables.$cell-size;

  font-size: 2rem;
  color: #f9f6f2;

  background: rgba(238, 228, 218, 0.35);
  border-radius: 6px;

  transition: transform 0.1s ease-in;

  @each $cell, $color in $cells {
    &_#{$cell} {
      background: $color;

      @if $cell != "super" and $cell < 16 {
        color: #776e65;
      }

      &::after {
        content: string.quote(#{$cell});
      }
    }
  }

  @for $i from 1 through 4 {
    @for $j from 1 through 4 {
      &_#{$i}_#{$j} {
        position: absolute;
        transform: translateX((variables.$cell-size + variables.$gap) * ($i - 1)) translateY((variables.$cell-size + variables.$gap) * ($j - 1));
      }
    }
  }
}
